generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Skill {
  id         String      @id @default(uuid())
  name       String
  level      String
  UserSkills UserSkill[]
}

model User {
  id            String          @id @default(uuid())
  username      String
  email         String          @unique
  password      String
  name          String
  lastName      String
  isAdmin       Boolean
  location      String
  timezone      String
  createdAt     DateTime        @default(now())
  UserSkills    UserSkill[]
  UserProjects  UserProject[]
  CompanyToUser CompanyToUser[]
  TaskToUser    TaskToUser[]
}

model UserSkill {
  id      String @id @default(uuid())
  level   String
  userId  String
  skillId String
  user    User   @relation(fields: [userId], references: [id])
  skill   Skill  @relation(fields: [skillId], references: [id])
}

model Role {
  id                String              @id @default(uuid())
  name              String
  UserProject       UserProject[]
  RoleToUserProject RoleToUserProject[]
}

model Company {
  id                String              @id @default(uuid())
  name              String
  createdAt         DateTime            @default(now())
  documents         Document[]
  CompanyToUsers    CompanyToUser[]
  projects          CompanyToProject[]
  CompanyToDocument CompanyToDocument[]
}

model Document {
  id                 String              @id @default(uuid())
  name               String
  url                String
  createdAt          DateTime            @default(now())
  projectId          String?
  project            Project?            @relation(fields: [projectId], references: [id])
  CompanyToDocuments CompanyToDocument[]
  Company            Company?            @relation(fields: [companyId], references: [id])
  companyId          String?
}

model Project {
  id                   String                 @id @default(uuid())
  name                 String
  description          String
  shift                Shift                  @relation(fields: [shiftId], references: [id])
  createdAt            DateTime               @default(now())
  milestones           Milestone[]
  tasks                Task[]
  documents            Document[]
  UserProjects         UserProject[]
  CompanyToProjects    CompanyToProject[]
  shiftId              String
  Meeting              Meeting[]
  ProjectToUserProject ProjectToUserProject[]
}

model Shift {
  id      String    @id @default(uuid())
  name    String
  Project Project[]
}

model Milestone {
  id          String   @id @default(uuid())
  name        String
  description String
  targetDate  DateTime
  completed   Boolean
  createdAt   DateTime @default(now())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  tasks       Task[]
}

model Task {
  id           String       @id @default(uuid())
  name         String
  description  String
  dueDate      DateTime
  status       TaskStatus   @relation(fields: [taskStatusId], references: [id])
  createdAt    DateTime     @default(now())
  milestoneId  String?
  milestone    Milestone?   @relation(fields: [milestoneId], references: [id])
  users        TaskToUser[]
  Project      Project?     @relation(fields: [projectId], references: [id])
  projectId    String?
  taskStatusId String
}

model TaskStatus {
  id   String @id @default(uuid())
  name String
  Task Task[]
}

model Calendar {
  id        String              @id @default(uuid())
  name      String
  createdAt DateTime            @default(now())
  events    CalendarToEvent[]
  meetings  CalendarToMeeting[]
  Event     Event[]
  Meeting   Meeting[]
}

model Event {
  id              String            @id @default(uuid())
  name            String
  date            DateTime
  createdAt       DateTime          @default(now())
  calendarId      String
  calendar        Calendar          @relation(fields: [calendarId], references: [id])
  CalendarToEvent CalendarToEvent[]
}

model Meeting {
  id                String              @id @default(uuid())
  name              String
  description       String
  link              String
  dateTime          DateTime
  createdAt         DateTime            @default(now())
  calendarId        String
  calendar          Calendar            @relation(fields: [calendarId], references: [id])
  projectId         String?
  project           Project?            @relation(fields: [projectId], references: [id])
  CalendarToMeeting CalendarToMeeting[]
}

model UserProject {
  id                   String                 @id @default(uuid())
  userId               String
  projectId            String
  user                 User                   @relation(fields: [userId], references: [id])
  project              Project                @relation(fields: [projectId], references: [id])
  roleId               String?
  role                 Role?                  @relation(fields: [roleId], references: [id])
  ProjectToUserProject ProjectToUserProject[]
  RoleToUserProject    RoleToUserProject[]
}

model CompanyToUser {
  id        String  @id @default(uuid())
  companyId String
  userId    String
  company   Company @relation(fields: [companyId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model CompanyToDocument {
  id         String   @id @default(uuid())
  companyId  String
  documentId String
  company    Company  @relation(fields: [companyId], references: [id])
  document   Document @relation(fields: [documentId], references: [id])
}

model CompanyToProject {
  id        String  @id @default(uuid())
  companyId String
  projectId String
  company   Company @relation(fields: [companyId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

model CalendarToEvent {
  id         String   @id @default(uuid())
  calendarId String
  eventId    String
  calendar   Calendar @relation(fields: [calendarId], references: [id])
  event      Event    @relation(fields: [eventId], references: [id])
}

model CalendarToMeeting {
  id         String   @id @default(uuid())
  calendarId String
  meetingId  String
  calendar   Calendar @relation(fields: [calendarId], references: [id])
  meeting    Meeting  @relation(fields: [meetingId], references: [id])
}

model TaskToUser {
  id     String @id @default(uuid())
  taskId String
  userId String
  task   Task   @relation(fields: [taskId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model ProjectToUserProject {
  id            String      @id @default(uuid())
  projectId     String
  userProjectId String
  project       Project     @relation(fields: [projectId], references: [id])
  userProject   UserProject @relation(fields: [userProjectId], references: [id])
}

model RoleToUserProject {
  id            String      @id @default(uuid())
  roleId        String
  userProjectId String
  role          Role        @relation(fields: [roleId], references: [id])
  userProject   UserProject @relation(fields: [userProjectId], references: [id])
}
