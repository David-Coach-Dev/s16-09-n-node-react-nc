generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Shift {
  MORNING
  AFTERNOON
  NIGHT
  FULL_TIME
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

model Skill {
  id         String      @id @default(cuid())
  name       String      @unique
  level      String?
  userSkills UserSkill[]
}

model User {
  id           String        @id @default(cuid())
  username     String?       @unique
  email        String        @unique
  password     String
  name         String
  lastName     String
  isAdmin      Boolean       @default(false)
  location     String?
  timezone     String?
  companyId    String
  company      Company       @relation(fields: [companyId], references: [id])
  cohortId     String
  cohort       Cohort        @relation(fields: [cohortId], references: [id])
  userProjects UserProject[]
  userSkills   UserSkill[]
  tasks        Task[]
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
}

model UserSkill {
  id      String  @id @default(cuid())
  userId  String
  skillId String
  level   String?
  user    User    @relation(fields: [userId], references: [id])
  skill   Skill   @relation(fields: [skillId], references: [id])

  @@unique([userId, skillId])
}

model Role {
  id          String        @id @default(cuid())
  name        String        @unique
  userProject UserProject[]
}

model Company {
  id         String     @id @default(cuid())
  name       String
  cohorts    Cohort[]
  calendar   Calendar?  @relation(fields: [calendarId], references: [id])
  user       User[]
  calendarId String?
  vertical   Vertical[]
  documents  Document[]
  createdAt  DateTime   @default(now()) @map("created_at") @db.Timestamptz(3)
}

model Document {
  id        String   @id @default(cuid())
  name      String
  url       String
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
}

model Cohort {
  id             String           @id @default(cuid())
  name           String
  companyId      String
  company        Company          @relation(fields: [companyId], references: [id])
  projects       Project[]
  user           User[]
  calendarId     String?
  verticalCohort VerticalCohort[]
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamptz(3)
}

model Project {
  id           String        @id @default(cuid())
  name         String
  description  String?
  verticalId   String
  vertical     Vertical      @relation("VerticalProjects", fields: [verticalId], references: [id])
  shift        Shift?
  userProjects UserProject[]
  calendar     Calendar?     @relation(fields: [calendarId], references: [id])
  milestones   Milestone[]
  tasks        Task[]
  cohort       Cohort?       @relation(fields: [cohortId], references: [id])
  cohortId     String?
  calendarId   String?
  meeting      Meeting[]
  document     Document[]
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
}

model Milestone {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  description String?
  targetDate  DateTime
  completed   Boolean  @default(false)
  project     Project  @relation(fields: [projectId], references: [id])
  tasks       Task[]
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
}

model Task {
  id          String     @id @default(cuid())
  name        String
  description String?
  dueDate     DateTime?
  status      TaskStatus @default(TODO)
  userId      String?
  user        User?      @relation(fields: [userId], references: [id])
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id])
  milestoneId String?
  milestone   Milestone? @relation(fields: [milestoneId], references: [id])
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz(3)
}

model Calendar {
  id        String    @id @default(cuid())
  name      String
  events    Event[]
  company   Company[]
  project   Project[]
  meetings  Meeting[]
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
}

model Event {
  id         String   @id @default(cuid())
  calendarId String
  name       String
  date       DateTime
  calendar   Calendar @relation(fields: [calendarId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
}

model Meeting {
  id          String    @id @default(cuid())
  name        String
  description String?
  link        String
  dateTime    DateTime
  calendarId  String?
  calendar    Calendar? @relation(fields: [calendarId], references: [id])
  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id])
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
}

model UserProject {
  id        String  @id @default(cuid())
  userId    String
  projectId String
  roleId    String
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
  role      Role    @relation(fields: [roleId], references: [id])

  @@unique([userId, projectId])
}

model Vertical {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  companyId   String
  company     Company          @relation(fields: [companyId], references: [id])
  cohorts     VerticalCohort[]
  projects    Project[]        @relation("VerticalProjects")
}

model VerticalCohort {
  id         String   @id @default(cuid())
  cohortId   String
  verticalId String
  cohort     Cohort   @relation(fields: [cohortId], references: [id])
  vertical   Vertical @relation(fields: [verticalId], references: [id])

  @@unique([cohortId, verticalId])
}
